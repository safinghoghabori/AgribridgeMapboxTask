diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXMarkerViewManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXMarkerViewManager.kt
index 186ed0e..79113b9 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXMarkerViewManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXMarkerViewManager.kt
@@ -38,13 +38,14 @@ class RNMBXMarkerViewManager(reactApplicationContext: ReactApplicationContext) :
 
     @ReactProp(name = "coordinate")
     override fun setCoordinate(markerView: RNMBXMarkerView, value: Dynamic) {
-        val array = value.asArray()
+        val array = value.asArray() ?: return
         markerView.setCoordinate(toGNPointGeometry(LatLng(array.getDouble(1), array.getDouble(0))))
     }
 
     @ReactProp(name = "anchor")
     override fun setAnchor(markerView: RNMBXMarkerView, map: Dynamic) {
-        markerView.setAnchor(map.asMap().getDouble("x").toFloat(), map.asMap().getDouble("y").toFloat())
+        val readableMap = map.asMap() ?: return
+        markerView.setAnchor(readableMap.getDouble("x").toFloat(), readableMap.getDouble("y").toFloat())
     }
 
     @ReactProp(name = "allowOverlap")
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXPointAnnotationManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXPointAnnotationManager.kt
index 4920db6..35243fd 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXPointAnnotationManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/annotation/RNMBXPointAnnotationManager.kt
@@ -69,7 +69,8 @@ class RNMBXPointAnnotationManager(reactApplicationContext: ReactApplicationConte
 
     @ReactProp(name = "anchor")
     override fun setAnchor(annotation: RNMBXPointAnnotation, map: Dynamic) {
-        annotation.setAnchor(map.asMap().getDouble("x").toFloat(), map.asMap().getDouble("y").toFloat())
+        val readableMap = map.asMap() ?: return
+        annotation.setAnchor(readableMap.getDouble("x").toFloat(), readableMap.getDouble("y").toFloat())
     }
 
     @ReactProp(name = "draggable")
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXCameraManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXCameraManager.kt
index 106c020..76eed01 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXCameraManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXCameraManager.kt
@@ -34,7 +34,8 @@ class RNMBXCameraManager(private val mContext: ReactApplicationContext, val view
     @ReactProp(name = "stop")
     override fun setStop(camera: RNMBXCamera, map: Dynamic) {
         if (!map.isNull) {
-            val stop = fromReadableMap(mContext, map.asMap(), null)
+            val readableMap = map.asMap() ?: return
+            val stop = fromReadableMap(mContext, readableMap, null)
             camera.setStop(stop)
         }
     }
@@ -42,7 +43,8 @@ class RNMBXCameraManager(private val mContext: ReactApplicationContext, val view
     @ReactProp(name = "defaultStop")
     override fun setDefaultStop(camera: RNMBXCamera, map: Dynamic) {
         if (!map.isNull) {
-            val stop = fromReadableMap(mContext, map.asMap(), null)
+            val readableMap = map.asMap() ?: return
+            val stop = fromReadableMap(mContext, readableMap, null)
             camera.setDefaultStop(stop)
         }
     }
@@ -95,13 +97,15 @@ class RNMBXCameraManager(private val mContext: ReactApplicationContext, val view
 
     @ReactProp(name = "followPadding")
     override fun setFollowPadding(camera: RNMBXCamera, value: Dynamic) {
-        camera.setFollowPadding(value.asMap())
+        val valueMap = value.asMap() ?: return
+        camera.setFollowPadding(valueMap)
     }
 
     @ReactProp(name = "maxBounds")
     override fun setMaxBounds(camera: RNMBXCamera, value: Dynamic) {
         if (!value.isNull) {
-            val collection = FeatureCollection.fromJson(value.asString())
+            val valueString = value.asString() ?: return
+            val collection = FeatureCollection.fromJson(valueString)
             camera.setMaxBounds(toLatLngBounds(collection))
         } else {
             camera.setMaxBounds(null)
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXViewport.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXViewport.kt
index fa058a8..8aded54 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXViewport.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/camera/RNMBXViewport.kt
@@ -40,14 +40,14 @@ import com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions
 import com.rnmapbox.rnmbx.events.constants.EventKeys
 
 class BaseEvent(
-    private val surfaceId: Int,
-    private val viewTag: Int,
-    private val eventName: String,
+    private val surfaceIdArg: Int,
+    private val viewTagArg: Int,
+    private val eventNameArg: String,
     private val eventData: WritableMap,
     private val canCoalesce: Boolean = false
-): Event<BaseEvent>(surfaceId, viewTag) {
+): Event<BaseEvent>(surfaceIdArg, viewTagArg) {
     override fun getEventName(): String {
-        return eventName
+        return eventNameArg
     }
 
     override fun canCoalesce(): Boolean {
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/images/RNMBXImagesManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/images/RNMBXImagesManager.kt
index 4c5a3a8..8f767d9 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/images/RNMBXImagesManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/images/RNMBXImagesManager.kt
@@ -73,7 +73,7 @@ class RNMBXImagesManager(private val mContext: ReactApplicationContext) :
     @ReactProp(name = "images")
     override fun setImages(images: RNMBXImages, map: Dynamic) {
         val imagesList = mutableListOf<Map.Entry<String, ImageEntry>>()
-        map.asMap().forEach { imageName, imageInfo ->
+        map.asMap()?.forEach { imageName, imageInfo ->
             when (imageInfo) {
                 is ReadableMap -> {
                     val uri = imageInfo.getString("uri")
@@ -160,7 +160,7 @@ class RNMBXImagesManager(private val mContext: ReactApplicationContext) :
     fun toNativeImage(dynamic: Dynamic): NativeImage? {
         when (dynamic.type) {
             ReadableType.String -> {
-                val resourceName = dynamic.asString();
+                val resourceName = dynamic.asString() ?: return null;
                 val drawable =
                     convertDrawableToBitmap(ResourceUtils.getDrawableByName(mContext, resourceName))
                 if (drawable != null) {
@@ -171,7 +171,7 @@ class RNMBXImagesManager(private val mContext: ReactApplicationContext) :
                 }
             }
             ReadableType.Map -> {
-                val map = dynamic.asMap()
+                val map = dynamic.asMap() ?: return null
                 val resourceName = map.getString("name")
                 val drawable =
                     convertDrawableToBitmap(ResourceUtils.getDrawableByName(mContext, resourceName))
@@ -192,8 +192,9 @@ class RNMBXImagesManager(private val mContext: ReactApplicationContext) :
     @ReactProp(name = "nativeImages")
     override fun setNativeImages(images: RNMBXImages, arr: Dynamic) {
         val nativeImages = mutableListOf<NativeImage>();
-        for (i in 0 until arr.asArray().size()) {
-            val nativeImage = toNativeImage(arr.asArray().getDynamic(i))
+        val array = arr.asArray() ?: return
+        for (i in 0 until array.size()) {
+            val nativeImage = toNativeImage(array.getDynamic(i))
             if (nativeImage != null) {
                 nativeImages.add(nativeImage)
             }
@@ -240,8 +241,8 @@ class RNMBXImagesManager(private val mContext: ReactApplicationContext) :
                 Logger.e("RNMBXImages", "stretch should be an array, got $stretch")
                 return null
             }
-            val array = stretch.asArray()
-            var result = mutableListOf<ImageStretches>();
+            val array = stretch.asArray() ?: return null
+            val result = mutableListOf<ImageStretches>();
             for (i in 0 until array.size()) {
                 if (array.getType(i) != ReadableType.Array) {
                     Logger.e("RNMBXImages", "each element of strech should be an array but was: ${array.getDynamic(i)}")
@@ -265,7 +266,7 @@ class RNMBXImagesManager(private val mContext: ReactApplicationContext) :
                 Logger.e("RNMBXImages", "content should be an array, got $content")
                 return null
             }
-            val array = content.asArray()
+            val array = content.asArray() ?: return null
             if (array.size() != 4) {
                 Logger.e("RNMBXImages", "content should be an array of 4 numbers, got $content")
                 return null
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXCustomLocationProviderManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXCustomLocationProviderManager.kt
index 67145d1..aee4d18 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXCustomLocationProviderManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXCustomLocationProviderManager.kt
@@ -23,7 +23,7 @@ class RNMBXCustomLocationProviderManager : ViewGroupManager<RNMBXCustomLocationP
     @ReactProp(name = "coordinate")
     override fun setCoordinate(view: RNMBXCustomLocationProvider, value: Dynamic?) {
         if (value?.type == ReadableType.Array) {
-            val array = value.asArray()
+            val array = value.asArray() ?: return
             if (array.size() == 2 && array.getType(0) == ReadableType.Number && array.getType(1) == ReadableType.Number) {
                 view.coordinate = Pair(array.getDouble(0), array.getDouble(1))
             } else {
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocation.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocation.kt
index 4c1ffd0..20b076c 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocation.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocation.kt
@@ -163,7 +163,9 @@ class RNMBXNativeUserLocation(context: Context) : AbstractMapFeature(context), O
             if (pulsing.hasKey("color")) {
                 when (pulsing.getType("color")) {
                     ReadableType.Map ->
-                        location2.pulsingColor = ColorPropConverter.getColor(pulsing.getMap("color"), mContext)
+                        ColorPropConverter.getColor(pulsing.getMap("color"), mContext)?.let {
+                            location2.pulsingColor = it
+                        } ?: Logger.e(LOG_TAG, "pulsing.color is a map but could not be parsed to a color.")
                     ReadableType.Number ->
                         location2.pulsingColor = pulsing.getInt("color")
                     else ->
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocationManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocationManager.kt
index 2869ce6..829c6e4 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocationManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/location/RNMBXNativeUserLocationManager.kt
@@ -109,7 +109,7 @@ fun _convertToDoubleValueOrExpression(value: Dynamic?, name: String): Value? {
     }
     return when (value.type) {
         ReadableType.Array ->
-            Expression.fromRaw(Gson().toJson(value.asArray().toJsonArray()))
+            Expression.fromRaw(Gson().toJson(value.asArray()?.toJsonArray()))
         ReadableType.Number ->
             Value.valueOf(value.asDouble())
         else -> {
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/mapview/RNMBXMapViewManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/mapview/RNMBXMapViewManager.kt
index 15f4917..19576ac 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/mapview/RNMBXMapViewManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/mapview/RNMBXMapViewManager.kt
@@ -139,8 +139,8 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
 
     @ReactProp(name = "localizeLabels")
     override fun setLocalizeLabels(mapView: RNMBXMapView, localeMap: Dynamic) {
-        val locale = localeMap.asMap().getString("locale")
-        val layerIds = localeMap.asMap().getArray("layerIds")?.toArrayList()?.mapNotNull {it.toString()}
+        val locale = localeMap.asMap()?.getString("locale")
+        val layerIds = localeMap.asMap()?.getArray("layerIds")?.toArrayList()?.mapNotNull {it.toString()}
         mapView.setReactLocalizeLabels(locale, layerIds)
     }
 
@@ -157,9 +157,9 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
 
     @ReactProp(name = "gestureSettings")
     override fun setGestureSettings(mapView: RNMBXMapView, settings: Dynamic) {
+        val map = settings.asMap() ?: return
         mapView.withMap {
            it.gesturesPlugin {
-               val map = settings.asMap()
                this.updateSettings {
                    map.getAndLogIfNotBoolean("doubleTapToZoomInEnabled", LOG_TAG)?.let {
                        this.doubleTapToZoomInEnabled = it
@@ -207,7 +207,8 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
 
     @ReactProp(name = "styleURL")
     override fun setStyleURL(mapView: RNMBXMapView, styleURL:Dynamic) {
-        mapView.setReactStyleURL(styleURL.asString())
+        val styleUrl = styleURL.asString() ?: return
+        mapView.setReactStyleURL(styleUrl)
     }
 
     @ReactProp(name = "preferredFramesPerSecond")
@@ -257,7 +258,8 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
 
     @ReactProp(name = "attributionViewMargins")
     override fun setAttributionViewMargins(mapView: RNMBXMapView, scaleBarMargins: Dynamic) {
-        mapView.setReactAttributionViewMargins(scaleBarMargins.asMap())
+        val margins = scaleBarMargins.asMap() ?: return
+        mapView.setReactAttributionViewMargins(margins)
     }
 
     @ReactProp(name = "attributionViewPosition")
@@ -282,12 +284,14 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
 
     @ReactProp(name = "scaleBarViewMargins")
     override fun setScaleBarViewMargins(mapView: RNMBXMapView, scaleBarMargins: Dynamic) {
-        mapView.setReactScaleBarViewMargins(scaleBarMargins.asMap())
+        val margins = scaleBarMargins.asMap() ?: return
+        mapView.setReactScaleBarViewMargins(margins)
     }
 
     @ReactProp(name = "scaleBarPosition")
     override fun setScaleBarPosition(mapView: RNMBXMapView, scaleBarPosition: Dynamic) {
-        mapView.setReactScaleBarPosition(scaleBarPosition.asMap())
+        val position = scaleBarPosition.asMap() ?: return
+        mapView.setReactScaleBarPosition(position)
     }
 
     @ReactProp(name = "compassEnabled")
@@ -302,7 +306,8 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
 
     @ReactProp(name = "compassViewMargins")
     override fun setCompassViewMargins(mapView: RNMBXMapView, compassViewMargins: Dynamic) {
-        mapView.setReactCompassViewMargins(compassViewMargins.asMap())
+        val margins = compassViewMargins.asMap() ?: return
+        mapView.setReactCompassViewMargins(margins)
     }
 
     @ReactProp(name = "compassViewPosition")
@@ -312,7 +317,8 @@ open class RNMBXMapViewManager(context: ReactApplicationContext, val viewTagReso
 
     @ReactProp(name = "compassPosition")
     override fun setCompassPosition(mapView: RNMBXMapView, compassMargins: Dynamic) {
-        mapView.setReactCompassPosition(compassMargins.asMap())
+        val margins = compassMargins.asMap() ?: return
+        mapView.setReactCompassPosition(margins)
     }
 
     @ReactProp(name = "contentInset") @Suppress("UNUSED_PARAMETER")
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleImportManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleImportManager.kt
index fafc00b..1bdbd5b 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleImportManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleImportManager.kt
@@ -49,10 +49,11 @@ class RNMBXStyleImportManager(context: ReactApplicationContext) :
 
     @ReactProp(name = "config")
     override fun setConfig(view: RNMBXStyleImport, value: Dynamic) {
+        val valueMap = value.asMap() ?: return
         if (value.type != ReadableType.Map) {
             Logger.e(REACT_CLASS, "config expected Map but received: ${value.type}")
         } else {
-            view.config = value.asMap().toValueHashMap()
+            view.config = valueMap.toValueHashMap()
         }
     }
 }
\ No newline at end of file
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleValue.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleValue.kt
index 8710d28..3767f9a 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleValue.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/RNMBXStyleValue.kt
@@ -223,7 +223,7 @@ class RNMBXStyleValue(config: ReadableMap) {
             val dynamic = mPayload!!.getDynamic("value")
             if (dynamic.type == ReadableType.Array) {
                 val array = dynamic.asArray()
-                if (array.size() > 0 && mPayload.getString("type") == "array") {
+                if (array != null && array.size() > 0 && mPayload.getString("type") == "array") {
                     val map = array.getMap(0)
                     if (map != null && map.getString("type") == "string") {
                         isExpression = true
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/layers/RNMBXModelLayerManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/layers/RNMBXModelLayerManager.kt
index 572fd41..f437ccf 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/layers/RNMBXModelLayerManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/layers/RNMBXModelLayerManager.kt
@@ -65,7 +65,8 @@ class RNMBXModelLayerManager : ViewGroupManager<RNMBXModelLayer>(),
 
     @ReactProp(name = "sourceLayerID")
     override fun setSourceLayerID(layer: RNMBXModelLayer, sourceLayerID: Dynamic) {
-        layer.setSourceLayerID(sourceLayerID.asString())
+        val sourceLayerIDString = sourceLayerID.asString() ?: return
+        layer.setSourceLayerID(sourceLayerIDString)
     }
 
     @ReactProp(name = "filter")
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXRasterSourceManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXRasterSourceManager.kt
index 17807bf..77bb246 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXRasterSourceManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXRasterSourceManager.kt
@@ -47,11 +47,12 @@ class RNMBXRasterSourceManager(reactApplicationContext: ReactApplicationContext)
 
     @ReactProp(name = "sourceBounds")
     override fun setSourceBounds(source: RNMBXRasterSource, value: Dynamic) {
-        if (value.type != ReadableType.Array || value.asArray().size() != 4) {
+        val valueArray = value.asArray() ?: return
+        if (value.type != ReadableType.Array || valueArray.size() != 4) {
            Logger.e(REACT_CLASS, "source bounds must be an array with left, bottom, top, and right values")
            return
         }
-        val bboxArray = Array(4) { i -> value.asArray().getDouble(i) }
+        val bboxArray = Array(4) { i -> valueArray.getDouble(i) }
 
         if(!this.validateBbox(bboxArray)){
             Logger.e(REACT_CLASS, "source bounds contain invalid bbox")
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXShapeSourceManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXShapeSourceManager.kt
index 3332858..7d48212 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXShapeSourceManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXShapeSourceManager.kt
@@ -82,7 +82,8 @@ class RNMBXShapeSourceManager(private val mContext: ReactApplicationContext, val
 
     @ReactProp(name = "shape")
     override fun setShape(source: RNMBXShapeSource, geoJSONStr: Dynamic) {
-        source.setShape(geoJSONStr.asString())
+        val geoJSON = geoJSONStr.asString() ?: return
+        source.setShape(geoJSON)
     }
 
     @ReactProp(name = "cluster")
@@ -103,14 +104,14 @@ class RNMBXShapeSourceManager(private val mContext: ReactApplicationContext, val
     @ReactProp(name = "clusterProperties")
     override fun setClusterProperties(source: RNMBXShapeSource, map: Dynamic) {
         val properties = HashMap<String, Any>()
-        val iterator = map.asMap().keySetIterator()
+        val readableMap = map.asMap() ?: return
+        val iterator = readableMap.keySetIterator()
         while (iterator.hasNextKey()) {
             val name = iterator.nextKey()
-            val expressions = map.asMap().getArray(name)
+            val expressions = readableMap.getArray(name)
             val builder: MutableList<Value> = ArrayList()
             for (iExp in 0 until expressions!!.size()) {
-                var argument: Expression
-                argument = when (expressions.getType(iExp)) {
+                val argument: Expression = when (expressions.getType(iExp)) {
                     ReadableType.Array -> ExpressionParser.from(
                         expressions.getArray(iExp)
                     )!!
@@ -158,7 +159,8 @@ class RNMBXShapeSourceManager(private val mContext: ReactApplicationContext, val
 
     @ReactProp(name = "hitbox")
     override fun setHitbox(source: RNMBXShapeSource, map: Dynamic) {
-        source.setHitbox(map.asMap())
+        val readableMap = map.asMap() ?: return
+        source.setHitbox(readableMap)
     }
 
     override fun customEvents(): Map<String, String>? {
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXTileSourceManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXTileSourceManager.kt
index 96e0688..e8b86c1 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXTileSourceManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXTileSourceManager.kt
@@ -40,9 +40,10 @@ abstract class RNMBXTileSourceManager<T : RNMBXTileSource<*>> internal construct
     @ReactProp(name = "tileUrlTemplates")
     fun setTileUrlTemplates(source: T, tileUrlTemplates: Dynamic) {
         val urls: MutableList<String> = ArrayList()
-        for (i in 0 until tileUrlTemplates.asArray().size()) {
-            if (tileUrlTemplates.asArray().getType(0) == ReadableType.String) {
-                tileUrlTemplates.asArray().getString(i)?.let { urls.add(it) } ?: Logger.d("RNMBXTileSource", "Skipping null URL template at index $i")
+        val titleUrlTemplatesArray = tileUrlTemplates.asArray() ?: return
+        for (i in 0 until titleUrlTemplatesArray.size()) {
+            if (titleUrlTemplatesArray.getType(0) == ReadableType.String) {
+                titleUrlTemplatesArray.getString(i)?.let { urls.add(it) } ?: Logger.d("RNMBXTileSource", "Skipping null URL template at index $i")
             }
         }
         source!!.tileUrlTemplates = urls
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXVectorSourceManager.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXVectorSourceManager.kt
index b0d3e88..bcb2649 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXVectorSourceManager.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/components/styles/sources/RNMBXVectorSourceManager.kt
@@ -30,7 +30,8 @@ class RNMBXVectorSourceManager(reactApplicationContext: ReactApplicationContext)
 
     @ReactProp(name = "hitbox")
     override fun setHitbox(source: RNMBXVectorSource, map: Dynamic) {
-        source.setHitbox(map.asMap())
+        val readableMap = map.asMap() ?: return
+        source.setHitbox(readableMap)
     }
 
     @ReactProp(name = "existing")
diff --git a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/utils/extensions/Dynamic.kt b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/utils/extensions/Dynamic.kt
index 36a4a0b..649a442 100644
--- a/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/utils/extensions/Dynamic.kt
+++ b/node_modules/@rnmapbox/maps/android/src/main/java/com/rnmapbox/rnmbx/utils/extensions/Dynamic.kt
@@ -31,7 +31,7 @@ fun ReadableMap.toValue() : Value {
 }
 
 fun ReadableArray.toValue(): Value {
-    var result = ArrayList<Value>(size())
+    val result = ArrayList<Value>(size())
 
     for (i in 0 until size()) {
         when (getType(i)) {
@@ -55,10 +55,10 @@ fun Dynamic.toValue(): Value {
         ReadableType.Null -> Value.nullValue()
         ReadableType.Boolean -> Value.valueOf(asBoolean())
         ReadableType.Number -> Value.valueOf(asDouble())
-        ReadableType.String -> Value.valueOf(asString())
-        ReadableType.Array -> asArray().toValue()
-        ReadableType.Map -> asMap().toValue()
-    }
+        ReadableType.String -> asString()?.let { Value.valueOf(it) }
+        ReadableType.Array -> asArray()?.toValue()
+        ReadableType.Map -> asMap()?.toValue()
+    } ?: Value.nullValue()
 }
 
 fun Dynamic.asBooleanOrNull(): Boolean? {
diff --git a/node_modules/@rnmapbox/maps/ios/RNMBX/RNMBXLocationModuleV11.swift b/node_modules/@rnmapbox/maps/ios/RNMBX/RNMBXLocationModuleV11.swift
index 3e66a17..55a8212 100644
--- a/node_modules/@rnmapbox/maps/ios/RNMBX/RNMBXLocationModuleV11.swift
+++ b/node_modules/@rnmapbox/maps/ios/RNMBX/RNMBXLocationModuleV11.swift
@@ -11,8 +11,8 @@ class RNMBXLocation: NSObject {
 
   var timestamp: Date? = nil
 
-  func toJSON() -> [String:Any?] {
-    var coords: [String:Any?] = [:]
+  func toJSON() -> [String:Any] {
+    var coords: [String:Any] = [:]
     
     if let location = location {
       coords = coords.merging([
@@ -251,11 +251,11 @@ class RNMBXLocationModule: RCTEventEmitter {
     throttler.cancel()
   }
   
-  @objc func getLastKnownLocation() -> RNMBXLocation? {
+  @objc func getLastKnownLocation() -> [String: Any]? {
     let last = RNMBXLocation()
     last.heading = _locationProvider.latestHeading
     last.location = _locationProvider.getLastObservedLocation()
-    return last
+    return last.toJSON()
   }
   
   @objc
diff --git a/node_modules/@rnmapbox/maps/src/modules/location/locationManager.ts b/node_modules/@rnmapbox/maps/src/modules/location/locationManager.ts
index 1d7ec92..fc574e8 100644
--- a/node_modules/@rnmapbox/maps/src/modules/location/locationManager.ts
+++ b/node_modules/@rnmapbox/maps/src/modules/location/locationManager.ts
@@ -171,8 +171,10 @@ export class LocationManager {
 
     if (!this._isListening) {
       MapboxGLLocationManager.start(validDisplacement);
+      //Determine if TurboModules (new architecture) are available.
+      const isTurbo: boolean = typeof MapboxGLLocationManager.onLocationUpdate === 'function';
 
-      if (Platform.OS === 'ios') {
+      if (Platform.OS === 'ios'|| !isTurbo) {
         this.subscription = LocationModuleEventEmitter.addListener(
           MapboxGL.LocationCallbackName.Update,
           this._onUpdate,
diff --git a/node_modules/@rnmapbox/maps/src/utils/index.ts b/node_modules/@rnmapbox/maps/src/utils/index.ts
index e5547f7..fe5911a 100644
--- a/node_modules/@rnmapbox/maps/src/utils/index.ts
+++ b/node_modules/@rnmapbox/maps/src/utils/index.ts
@@ -77,7 +77,7 @@ export function cloneReactChildrenWithProps(
     return null;
   }
 
-  let foundChildren = null;
+  let foundChildren: typeof children[] | null = null;
 
   if (!Array.isArray(children)) {
     foundChildren = [children];
@@ -86,9 +86,19 @@ export function cloneReactChildrenWithProps(
   }
 
   const filteredChildren = foundChildren.filter((child) => !!child); // filter out falsy children, since some can be null
-  return React.Children.map(filteredChildren, (child) =>
-    React.cloneElement(child, propsToAdd),
-  );
+  return React.Children.map(filteredChildren, (child) => {
+    if (!React.isValidElement(child)) {
+      return child;
+    }
+
+    if (child.type === React.Fragment) {
+      // If the child is a Fragment, return it without adding props
+      return child;
+    }
+
+    // Otherwise, clone and add props
+    return React.cloneElement(child, propsToAdd);
+  });
 }
 
 export function resolveImagePath(imageRef: ImageSourcePropType): string {
